local function put()
  if (not turtle) then
    print("PUT")
    return
  end

  local ok = false
  for s=1, 16 do
    if turtle.getItemCount(s) > 0 then
      turtle.select(s)
      ok = true
      break
    end
  end
  
  if ok then
    local result = turtle.placeDown()
    if (not result) then
      print("Cannot place block")
      os.sleep(10)
      return put()
    end
  else
    print("Out of blocks")
    os.sleep(10)
    return put()
  end
end

local function go(d, c)
  d = string.upper(d)
  c = c or 1
  if (not turtle) then
    print(d .. "x" .. c)
    return
  end

  for i=1,c do
    if turtle.getFuelLevel() < 1 then
      t.select(16)
      t.refuel()
      if turtle.getFuelLevel() < 1 then
        print("Out of fuel")
        os.sleep(10)
        return go(d, c)
      end
    end

    local f = nil
    if     (d == "U") then f = turtle.up
    elseif (d == "D") then f = turtle.down
    elseif (d == "L") then f = turtle.turnLeft
    elseif (d == "R") then f = turtle.turnRight
    elseif (d == "F") then f = turtle.forward
    elseif (d == "B") then f = turtle.back
    else error("Unknown turtle direction " .. d)
    end

    local result = f()
    if (not result) then
      print("Cannot move " .. d)
      os.sleep(10)
      return go(d, c)
    end
  end
end

local function put_go(d,n)
  for i=1,n do
    put()
    go(d)
  end
end

local function init_pattern(s)
  local p = {}
  p["size"] = s
  for h=1,s do
    p[h] = {}
    for y=1,s do
      p[h][y] = {}
      for x=1,s do
        p[h][y][x] = "."
      end
    end
  end
  return p
end

local function print_pattern(p)
  for h=1,p["size"] do
    for y=1,p["size"] do
      for x=1,p["size"] do
        io.write(p[h][y][x])
      end
      print("")
    end
    print("")
  end
end


local function build_pattern(p, x0, y0)
  if (not turtle) then
    print_pattern(p)
    --return
  end

  local tx, ty = x0, y0
  for h=1,p["size"] do
    local min_x, min_y = p["size"], p["size"]
    local max_x, max_y = 1, 1
    for y=1,p["size"] do
      for x=1,p["size"] do
        if p[h][y][x] ~= "." then
          if x < min_x then min_x = x end
          if y < min_y then min_y = y end
          if x > max_x then max_x = x end
          if y > max_y then max_y = y end
        end
      end
    end

    go("U")

    if (ty < min_y) then
      go("F", min_y - ty)
    elseif (ty > min_y) then
      go("B", ty - min_y)
    end
    if (tx ~= min_x) then
      go("R", 1)
      if (tx < min_x) then
        go("F", min_x - tx)
      else
        go("B", tx - min_x)
      end
      go("L", 1)
    end
    tx, ty = min_x, min_y

    local scan_offset = 1
    for y=min_y,max_y do
      local scan_min_x, scan_max_x = min_x, max_x
      if scan_offset < 0 then
        scan_min_x = max_x
        scan_max_x = min_x
      end
      for x=scan_min_x,scan_max_x,scan_offset do
        if p[h][y][x] == "X" then
          put()
        end
        go("F")
        tx = tx + scan_offset
      end

      if (scan_offset > 0) then
        go("R")
        go("F")
        go("R")
      else
        go("L")
        go("F")
        go("L")
      end
      ty = ty + 1
      scan_offset = -scan_offset
    end
  end
end

-- Stolen shamelessly from Wikipedia's example implementation
local function mp_circle(layer, radius, x0, y0)
  if (radius == 0) then
    layer[x0][y0] = "X"
    return
  end

  local f = 1 - radius;
  local ddF_x = 1;
  local ddF_y = -2 * radius;
  local x = 0;
  local y = radius;
 
  layer[x0][y0 + radius] = "X"
  layer[x0][y0 - radius] = "X"
  layer[x0 + radius][y0] = "X"
  layer[x0 - radius][y0] = "X"
 
  while (x < y) do
    if (f >= 0) then
      y = y - 1
      ddF_y = ddF_y + 2
      f = f + ddF_y
    end
    x = x + 1
    ddF_x = ddF_x + 2
    f = f + ddF_x
    layer[x0 + x][y0 + y] = "X"
    layer[x0 - x][y0 + y] = "X"
    layer[x0 + x][y0 - y] = "X"
    layer[x0 - x][y0 - y] = "X"
    layer[x0 + y][y0 + x] = "X"
    layer[x0 - y][y0 + x] = "X"
    layer[x0 + y][y0 - x] = "X"
    layer[x0 - y][y0 - x] = "X"
  end
end

local tArgs={...}
local diameter = tonumber(tArgs[1])
--local perc = tonumber(tArgs[2] or 1)

if (diameter%2 ~= 1) then
  -- FIXME This should be easy to work around
  error("Requires an odd diameter")
end

c_rads = {}
for h=1,math.floor(diameter/2) do
  c_rad = diameter/2 * math.sin((h/diameter)*math.pi)
  table.insert(c_rads, math.floor(c_rad))
end
table.insert(c_rads, c_rads[#c_rads])
for h=math.floor(#c_rads-1),1,-1 do
  table.insert(c_rads, c_rads[h])
end

local origin = math.ceil(diameter/2)
p = init_pattern(diameter)
for i,r in ipairs(c_rads) do
  mp_circle(p[i], r, origin, origin)
end
build_pattern(p, 0, origin, origin)
