is = peripheral.wrap("back")

function get_item_desc(item_id)
  desc = storage.get("item_descs", item_id)
  if desc == nil then
    print("What is the name of this item?")
    name = read()
    stack_limit = turtle.getItemCount(1) + turtle.getItemSpace(1)
    desc = {item_id=item_id, name=name, quantity=0, stack_limit=stack_limit}
    storage.set("item_descs", item_id, desc)
  end
  return desc
end

function store_item(desc)
  if desc.loc == nil then
    free_locs = storage.get("free_locs", "free_locs")
    next_loc = table.remove(free_locs, 1)
    if next_loc == nil then
      error("No more free chest locations")
    end
    storage.set("free_locs", "free_locs", free_locs)
    desc.loc = next_loc
  end

  loc = desc.loc
  print("Storing at " .. loc["s"] .. "," .. loc["h"] .. "," .. loc["d"])
  -- TODO This should probably be done by chester on deposit
  desc.quantity = desc.quantity + turtle.getItemCount(1)
  turtle.dropUp()
  storage.set("item_descs", desc.item_id, desc)
end

function examine_item()
  r = is.list(4)
  n = 0
  item_id = nil
  for k,v in pairs(r) do
    n = n + 1
    item_id = k
  end

  if item_id == nil then
    error("Can't identify item")
  elseif n > 1 then
    error("Multiple responses from IS")
  else
    desc = get_item_desc(item_id)
    store_item(desc)
  end
end

while turtle.drop() do
  -- Nothing
end

while true do
  sucked = turtle.suck()
  if sucked then
    examine_item()
  else
    os.sleep(0.5)
  end
end
