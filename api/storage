function _serialize(fh, o)
  if type(o) == "number" then
    fh.write(o)
  elseif type(o) == "nil" or type(o) == "boolean" then
    fh.write(tostring(o))
  elseif type(o) == "string" then
    fh.write(string.format("%q", o))
  elseif type(o) == "table" then
    fh.write("{\n")
    for k,v in pairs(o) do
      fh.write("  ", k, " = ")
      _serialize(v)
      fh.write(",\n")
    end
    fh.write("}\n")
  else
    error("cannot serialize a " .. type(o))
  end
end

function _deserialize(s)
  return loadstring("return " .. s)()
end

function _get_storage_dir(db, k)
  s = hashing.crc32_str(k)
  dir1 = string.strsub(s,1,2)
  dir2 = d1 .. string.strsub(s,3,4)
  return table.concat({"storage", db, dir1, dir2}, "/")
end

function set(db, k, v)
  dir = _get_storage_dir(db, k)
  path = dir .. "/" .. k
  if (v == nil) then
    fs.makeDir(dir)
    fh = fs.open(path, "w")
    _serialize(fh, v)
    fh.close()
  else
    fs.delete(path)
  end
end

function get(db, k)
  dir = _get_storage_dir(db, k)
  path = dir .. "/" .. k
  if (fs.exists(path) and not fs.isDir(path)) then
    fh = fs.open(path, "r")
    s = fs.readAll()
    return _deserialize(s)
  else
    return nil
  end
end
