function _serialize(fh, o, depth)
  if depth > 16 then
    error("Depth limit exceeded in serialization")
  end

  if type(o) == "number" then
    fh.write(o)
  elseif type(o) == "nil" or type(o) == "boolean" then
    fh.write(tostring(o))
  elseif type(o) == "string" then
    fh.write(string.format("%q", o))
  elseif type(o) == "table" then
    fh.write("{\n")
    for k,v in pairs(o) do
      fh.write("[")
      _serialize(fh, k, depth+1)
      fh.write("] = ")
      _serialize(fh, v, depth+1)
      fh.write(",\n")
    end
    fh.write("}\n")
  else
    error("cannot serialize a " .. type(o))
  end
end

function _deserialize(s)
  return loadstring("return " .. s)()
end

function _get_storage_path(db, k)
  s = hashing.crc32_str(tostring(k))
  dir1 = string.sub(s,1,2)
  dir2 = string.sub(s,1,4)
  return table.concat({"storage", db, dir1, dir2}, "/"), s
end

function set(db, k, v)
  dir, fn = _get_storage_path(db, k)
  path = dir .. "/" .. fn
  tmp_path = path .. ".tmp"
  fs.makeDir(dir)

  subhash = {}
  if not fs.exists(path) and fs.exists(tmp_path) then
    fs.move(tmp_path, path)
  end
  if fs.exists(path) then
    fh = fs.open(path, "r")
    s = fh.readAll()
    fh.close()
    subhash = _deserialize(s)
  end
  subhash[k] = v

  fh = fs.open(tmp_path, "w")
  _serialize(fh, subhash, 1)
  fh.close()
  fs.delete(path)
  fs.move(tmp_path, path)
end

function delete(db, k)
  set(db, k, nil)
end

function get(db, k)
  dir, fn = _get_storage_path(db, k)
  path = dir .. "/" .. fn
  tmp_path = path .. ".tmp"

  if not fs.exists(path) and fs.exists(tmp_path) then
    fs.move(tmp_path, path)
  end
  if fs.exists(path) then
    fh = fs.open(path, "r")
    s = fh.readAll()
    fh.close()
    subhash = _deserialize(s)
    return subhash[k]
  else
    return nil
  end
end
